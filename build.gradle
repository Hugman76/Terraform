plugins {
	id 'java'
	id 'maven-publish'
	id 'idea'
	id 'eclipse'
	id 'fabric-loom' version '0.8-SNAPSHOT'
}

static def formatVersion(project, version) {
	return version + (!version.endsWith("-SNAPSHOT") ? ("+" + (System.getenv().BUILD_NUMBER ? ("build." + System.getenv().BUILD_NUMBER) : "custom")) : "");
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'maven-publish'
	apply plugin: 'fabric-loom'

	sourceCompatibility = JavaVersion.VERSION_16
	targetCompatibility = JavaVersion.VERSION_16

	group = project.maven_group

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	dependencies {
		minecraft "com.mojang:minecraft:$project.minecraft_version"
		mappings "net.fabricmc:yarn:$project.yarn_mappings:v2"
		modImplementation "net.fabricmc:fabric-loader:$project.loader_version"

		compileOnly "com.google.code.findbugs:jsr305:3.0.2"
	}

	configurations {
		dev
	}

	repositories {
		mavenLocal()
	}

	jar {
		classifier = "dev"
	}

	afterEvaluate {
		remapJar {
			input = file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar")
			archiveName = "${archivesBaseName}-${version}.jar"
		}

		artifacts {
			dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
		}

		processResources {
			inputs.property "version", project.version

			filesMatching("fabric.mod.json") {
				expand "version": project.version
			}
		}
	}
	tasks.withType(JavaCompile) {
		it.options.encoding = "UTF-8"
		it.options.release = 16
	}
}

subprojects {

	dependencies {
		testmodImplementation sourceSets.main.output
	}

	task remapMavenJar(type: Copy, dependsOn: remapJar) {
		afterEvaluate {
			from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
			into("${project.buildDir}/libs/")
			rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				afterEvaluate {
					artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
						builtBy remapMavenJar
					}
				}
			}
		}

		setupRepositories(repositories)
	}

	javadoc.enabled = false
}

void setupRepositories(RepositoryHandler repositories) {
	//repositories.mavenLocal() // uncomment for testing
	if (project.hasProperty('mavenPass')) {
		repositories.maven {
			url "http://mavenupload.modmuss50.me/"
			credentials {
				username 'buildslave'
				password project.getProperty('mavenPass')
			}
		}
	}
}

dependencies {
	afterEvaluate {
		subprojects.each {
			implementation project(path: "${it.name}", configuration: "dev")
			include project("${it.name}:")
		}
	}
}

task buildTerraform {
	subprojects.each {
		subprojects.each { dependsOn("${it.name}:build") }
	}
}

task publishTerraform {
	subprojects.each {
		subprojects.each { dependsOn("${it.name}:publish") }
	}
}

task publishTerraformLocally {
	subprojects.each {
		subprojects.each { dependsOn("${it.name}:publishToMavenLocal") }
	}
}
